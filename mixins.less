/* ---------------------------------- */

/*
 * LESS Hat 0.3.9
 * CSSHat.com
 * 2012
 * Petr Brzek & Jan Kuca
 */
 
/* ---------------------------------- */

/*
 *  TABLE OF MIXINS
 *
 *  @Shadow
 *  @Gradient
 *  @Rounded
 *  @Opacity
 *  @Size
 *  @Transition
 *  @Animation
 */

 //TODO: Add all properties which need to be prefixed, SVG for gradient

/* ---------------------------------- */

/* @Shadow */

.shadow(@arguments) {
  -webkit-box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  box-shadow: @arguments;
}

// .shadow(~"0 1px 10px #000, inset 0 -2px 5px red");

/* ---------------------------------- */

/* @Gradient */

.gradient(@arguments){  

  @gradientMoz: ~`(function(){ var $source = "@{arguments}"; var exist = null; var gradientSteps = $source.split(/,(?=\s*(?:linear|radial))/g); var gradientStepsLength = gradientSteps.length; var toTop = /to\s*top/; var toRight = /to\s*right/; var toBottom = /to\s*bottom/; var toLeft = /to\s*left/; var angle = /\d*deg/; for (var i = 0; i< gradientStepsLength; i++) { if ( /linear/.test(gradientSteps[i])) { gradientSteps[i] = gradientSteps[i].replace(/linear-gradient/, "-moz-linear-gradient"); if ( toTop.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toTop, "bottom"); } else if ( toRight.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toRight, "left"); } else if ( toBottom.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toBottom, "top"); } else if ( toLeft.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toLeft, "right" );} else if ( angle.test(gradientSteps[i]) ) { var newAngle = gradientSteps[i].match(/\d*deg/); newAngle = (parseInt(newAngle) - 90) * -1 + "deg"; gradientSteps[i] = gradientSteps[i].replace(angle, newAngle); } } else{ gradientSteps[i] = gradientSteps[i].replace(/radial-gradient/, "-moz-radial-gradient").replace(/,\s* \d*(px|%) \d*(px|%)/,", circle");   }; try { "".trim(); exist = true; } catch(e) { exist = false; } if ( exist ) {  gradientSteps[i] = gradientSteps[i].trim(); } } return gradientSteps; }())`;
  @gradientWebkit: ~`(function(){ var $source = "@{arguments}"; var exist = null; var gradientSteps = $source.split(/,(?=\s*(?:linear|radial))/g); var gradientStepsLength = gradientSteps.length; var toTop = /to\s*top/; var toRight = /to\s*right/; var toBottom = /to\s*bottom/; var toLeft = /to\s*left/; var angle = /\d*deg/; for (var i = 0; i< gradientStepsLength; i++) { if ( /linear/.test(gradientSteps[i])) { gradientSteps[i] = gradientSteps[i].replace(/linear-gradient/, "-webkit-linear-gradient"); if ( toTop.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toTop, "bottom"); } else if ( toRight.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toRight, "left"); } else if ( toBottom.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toBottom, "top"); } else if ( toLeft.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toLeft, "right" );} else if ( angle.test(gradientSteps[i]) ) { var newAngle = gradientSteps[i].match(/\d*deg/); newAngle = (parseInt(newAngle) - 90) * -1 + "deg"; gradientSteps[i] = gradientSteps[i].replace(angle, newAngle); } } else{ gradientSteps[i] = gradientSteps[i].replace(/radial-gradient/, "-webkit-radial-gradient");   }; try { "".trim(); exist = true; } catch(e) { exist = false; } if ( exist ) {  gradientSteps[i] = gradientSteps[i].trim(); } } return gradientSteps; }())`;
  @gradientOpera: ~`(function(){ var $source = "@{arguments}"; var exist = null; var gradientSteps = $source.split(/,(?=\s*(?:linear|radial))/g); var gradientStepsLength = gradientSteps.length; var toTop = /to\s*top/; var toRight = /to\s*right/; var toBottom = /to\s*bottom/; var toLeft = /to\s*left/; var angle = /\d*deg/; for (var i = 0; i< gradientStepsLength; i++) { if ( /linear/.test(gradientSteps[i])) { gradientSteps[i] = gradientSteps[i].replace(/linear-gradient/, "-o-linear-gradient"); if ( toTop.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toTop, "bottom"); } else if ( toRight.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toRight, "left"); } else if ( toBottom.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toBottom, "top"); } else if ( toLeft.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(toLeft, "right" );} else if ( angle.test(gradientSteps[i]) ) { var newAngle = gradientSteps[i].match(/\d*deg/); newAngle = (parseInt(newAngle) - 90) * -1 + "deg"; gradientSteps[i] = gradientSteps[i].replace(angle, newAngle); } } else{ gradientSteps[i] = gradientSteps[i].replace(/radial-gradient/, "-o-radial-gradient");   }; try { "".trim(); exist = true; } catch(e) { exist = false; } if ( exist ) {  gradientSteps[i] = gradientSteps[i].trim(); } } return gradientSteps; }())`;
  @gradientOldWebkit: ~`(function(){ var $source = "@{arguments}"; var exist = null; var gradientSteps = $source.split(/,(?=\s*(?:linear|radial))/g); var gradientStepsLength = gradientSteps.length; var top = /top/; var right = /right/; var bottom = /bottom/; var left = /left/; var toTop = /to\s*top/; var toRight = /to\s*right/; var toBottom = /to\s*bottom/; var toLeft = /to\s*left/; var diagonal1 = /45deg/; var diagonal2 = /-45deg/ ;var angle = /\d*deg/;  for (var i = 0; i< gradientStepsLength; i++) { if (/linear/.test(gradientSteps[i])) { gradientSteps[i] = gradientSteps[i].replace(/linear-gradient\s*\(/, "-webkit-gradient(linear, "); if (top.test(gradientSteps[i]) || toBottom.test(gradientSteps[i])) { var substitute = gradientSteps[i].match(top) ? top : toBottom; gradientSteps[i] = gradientSteps[i].replace(substitute, "left top, left bottom");} else if ( right.test(gradientSteps[i]) || toLeft.test(gradientSteps[i]) ) { var substitute = gradientSteps[i].match(right) ? right : toLeft; gradientSteps[i] = gradientSteps[i].replace(substitute, "right top, left top"); } else if( bottom.test(gradientSteps[i]) || toTop.test(gradientSteps[i])) { var substitute = gradientSteps[i].match(bottom) ? bottom : toTop; gradientSteps[i] = gradientSteps[i].replace(substitute, "left bottom, left top"); } else if ( left.test(gradientSteps[i]) || toRight.test(gradientSteps[i])) { var substitute = gradientSteps[i].match(left) ? left : toRight; gradientSteps[i] = gradientSteps[i].replace(substitute, "left top, right top"); } else if ( diagonal1.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(diagonal1, "left bottom, right top"); } else if ( diagonal2.test(gradientSteps[i]) ) { gradientSteps[i] = gradientSteps[i].replace(diagonal2, "left top, right bottom"); } else { gradientSteps[i].replace(angle, "left top, left bottom");}} var syntax = gradientSteps.toString(); var rgbaArray = syntax.match(/rgba?\(\d+,\s*\d+,\s*\d+,\s*(?:0|1|\.\d+|0\.\d+)\)\s*\d*%*/g) || 0; var hslaArray = syntax.match(/hsla?\(\d+,\s*\d+%,\s*\d+%,\s*(?:0|1|\.\d+|0\.\d+)\)\s*\d*%*/g) || 0; var rgbaArraySugar = []; var hslaArraySugar = []; for (var j = 0; j < rgbaArray.length; j++) { rgbaArraySugar[j] = rgbaArray[j].replace(/,/g,"--");} for(var n = 0; n < hslaArray.length; n++) { hslaArraySugar[n] = hslaArray[n].replace(/,/g,"--"); } for(var k = 0; k < rgbaArray.length; k++) { syntax = syntax.replace(rgbaArray[k],rgbaArraySugar[k]); } for(var o = 0; o < hslaArray.length; o++) { syntax = syntax.replace(hslaArray[o],hslaArraySugar[o]);} syntax = syntax.substring(0, syntax.length - 1); var gradientArray = syntax.split(","); for( var m = 0; m < gradientArray.length; m++ ) { gradientArray[m] = gradientArray[m].replace(/(#\w{3,6})\s*(\d*%*)/g, "color-stop($2,$1)").replace(/(rgba?\(\d+--\s*\d+--\s*\d+--\s*(?:0|1|\.\d+|0\.\d+)\))\s*(\d*%)*/g, "color-stop($2,$1)").replace(/(hsla?\(\d+--\s*\d+%--\s*\d+%--\s*(?:0|1|\.\d+|0\.\d+)\))\s*(\d*%)*/g, "color-stop($2,$1)").replace(/--/g,",").replace(/((?:aqua|black|blue|fuchsia|gray|grey|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow))\s*(\d*%)*/g, "color-stop($2,$1)");  try { "".trim(); exist = true; } catch(e) { exist = false; } if ( exist ) {  gradientArray[m] = gradientArray[m].trim(); } }  } gradientArray = gradientArray.join(",").replace(/radial-gradient\(.*?color/g, "-webkit-gradient(radial, center center, 0px, center center, 100%, color"); return gradientArray; }())`;
  
  //@gradientSvg: ~`(function(){ var $source = "@{arguments}"; var exist = null; var gradientSteps = $source.split(/,(?=\s*(?:linear|radial))/g); var gradientStepsLength = gradientSteps.length; var top = /top/; var right = /right/; var bottom = /bottom/; var left = /left/; var toTop = /to\s*top/; var toRight = /to\s*right/; var toBottom = /to\s*bottom/; var toLeft = /to\s*left/; var diagonal1 = /45deg/; var diagonal2 = /-45deg/ ;var angle = /\d*deg/; for(var i = 0; i < gradientStepsLength; i++) { var direction = null; if( top.test(gradientSteps[i]) || toBottom.test(gradientSteps[i])) { direction = ' x1="0%" y1="0%" x2="0%" y2="100%">'; } else if ( right.test(gradientSteps[i]) || toLeft.test(gradientSteps[i]) ) { direction = ' x1="100%" y1="0%" x2="0%" y2="0%">'; } else if (bottom.test(gradientSteps[i]) || toTop.test(gradientSteps[i])) { direction = ' x1="0%" y1="100%" x2="0%" y2="0%">'; } else if (left.test(gradientSteps[i]) || toRight.test(gradientSteps[i])) { direction = ' x1="0%" y1="0%" x2="100%" y2="0%">'; } else if ( diagonal1.test(gradientSteps[i])) { direction = ' x1="0%" y1="100%" x2="100%" y2="0%">'; } else if ( diagonal2.test(gradientSteps[i])) { direction = ' x1="0%" y1="0%" x2="100%" y2="100%">'; } else { direction = ' x1="0%" y1="0%" x2="0%" y2="100%">'; } gradientSteps[i] = gradientSteps[i].replace(/^linear-gradient\((to bottom|to top|to left|to right|top|left|right|bottom|\d{,3}deg)?,/g, "").replace(/\)$/g, ""); var syntax = gradientSteps.toString(); var rgbaArray = syntax.match(/rgba?\(\d+,\s*\d+,\s*\d+,\s*(?:0|1|\.\d+|0\.\d+)\)\s*\d*%*/g) || 0; var rgbaArraySugar = []; } return rgbaArray; }())`;
  

  //background-image: @gradientSvg;

  background-image: @gradientMoz;
  background-image: @gradientOldWebkit;
  background-image: @gradientWebkit;
  background-image: @gradientOpera;
  background-image: @arguments;

}

.gradient(~"radial-gradient(center, ellipse cover, hsla(212,67%,36%,1) 0%,hsla(207,69%,51%,1) 50%,hsla(208,73%,46%,1) 60%,hsla(206,70%,70%,1) 100%), radial-gradient(center, ellipse cover, hsla(212,67%,36%,1) 0%,hsla(207,69%,51%,1) 50%,hsla(208,73%,46%,1) 60%,hsla(206,70%,70%,1) 100%);");

/* ---------------------------------- */

/* @Rounded */

.rounded(@radius) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
  -moz-background-clip: padding; -webkit-background-clip: padding-box; background-clip: padding-box; 
}

// .rounded(10px); // all corner rounded
// .rounded(~"10px / 20px"); // horizontal and vertical rounded differently
// .rounded(~"0 10px 0 0"); // only top right corner rounded

/* ---------------------------------- */

/* @Opacity */

.opacity(@opacity) {
  -moz-opacity: @opacity;
  -webkit-opacity: @opacity;
  opacity: @opacity;
}

// .opacity(.5);

/* ---------------------------------- */

/* @Size */

.size(@square) {
  width: @square;
  height: @square;
}

.size(@width, @height) {
  width: @width;
  height: @height;
}

// .size(10px); // render width:10px; height:10px;
// .size(10px, 20px); // render width:10px; height: 20px;

/* ---------------------------------- */

/* @Transition */

.transition(@arguments) {
  -webkit-transition: @arguments;
  -moz-transition: @arguments;
  -o-transition: @arguments;
  transition: @arguments;
}

// .transition(~"color .5s ease-in, background .3s 1s ease-in-out");

/* ---------------------------------- */

/* @Animation */

.animation(@arguments){
  -webkit-animation: @arguments;
  -moz-animation: @arguments;
  -o-animation: @arguments;
  animation: @arguments;
}

// .animation(~"animation1 6s backwards 2s, animation2 3s linear alternate infinite");

/* ---------------------------------- */